buildscript {
    apply from: gradle.extended.files.modules
    apply from: "gradle/versions.gradle"

    dependencies {
        classpath additionals.sonarqube.gradlePlugin
        classpath additionals.nexus.gradlePlugin
        classpath additionals.license.gradlePlugin
    }
}

plugins {
    alias(additionals.plugins.publish.nexus)
    alias(additionals.plugins.android.application) apply false
    alias(additionals.plugins.android.library) apply false
    alias(additionals.plugins.kotlin.android) apply false
    alias(additionals.plugins.kotlin.multiplatform) apply false
    alias(additionals.plugins.kotlin.jvm) apply false
    alias(additionals.plugins.jetbrains.compose) apply false
    alias(additionals.plugins.compose.compiler) apply false
    alias(libs.plugins.googleServices) apply false
    alias(libs.plugins.appDistribution) apply false
}

allprojects {
    repositories {
        google()
        mavenCentral()
        mavenLocal()
        maven { url 'https://jitpack.io' }
    }
}

group = rootProject.ext.group
version = rootProject.ext.version

def getExtraString = { String name ->
    if (rootProject.ext.has(name)) return rootProject.ext[name]?.toString()
    else return null
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl = URI.create("https://ossrh-staging-api.central.sonatype.com/service/local/")
            snapshotRepositoryUrl = URI.create("https://central.sonatype.com/repository/maven-snapshots/")
            username = getExtraString("sonatypeUsername") ?: ""
            password = getExtraString("sonatypePassword") ?: ""
        }
    }
}

subprojects {
    group = rootProject.ext.group
    version = rootProject.ext.version

    task allDeps(type: DependencyReportTask) {}

    if (isSourcesModule(it)) {
        apply from: gradle.extended.files.moduleSetup
    }
}
